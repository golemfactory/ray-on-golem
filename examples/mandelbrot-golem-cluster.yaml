# Ray on Golem cluster name
cluster_name: golem-cluster

# The maximum number of workers the cluster will have at any given time
max_workers: 10

# The number of minutes that need to pass before an idle worker node is removed by the Autoscaler
idle_timeout_minutes: 2

# The cloud provider-specific configuration properties.
provider:
  type: "external"
  use_internal_ips: true
  module: "ray_on_golem.provider.node_provider.GolemNodeProvider"
  parameters:
    # Port of golem webserver that has connection with golem network
    webserver_port: 4578

    # Blockchain used for payments.
    # Goerli means running free nodes on testnet,
    # Polygon is for mainnet operations.
    payment_network: "goerli"

    # Maximum amount of GML that's going to be spent (not supported yet)
    total_budget: 2

    # Params for creating golem demands (same for head and workers)
    node_config:
      demand:
        # if not provided, image_tag will be autodetected based on currently used python and ray versions
        # check available versions at https://registry.golem.network/explore/golem/ray-on-golem
        image_tag: "golem/ray-on-golem:0.8.0-py3.10.13-ray2.9.2"

        # List of urls which will be added to the Computation Manifest
        # Requires protocol to be defined in all URLs
        # If not provided demand will not use Computation Manifest
        # outbound_urls: ["https://pypi.dev.golem.network"]

        # you can also provide the image hash directly (although it is not recommended :)
        # image_hash: "c6fc9b12da19d56a998eace84b6df961852360b37479e93ef4ce3913" # approxit/ray-test:py3.10.12-ray2.3.1

        min_mem_gib: 0
        min_cpu_threads: 0
        min_storage_gib: 0

# The files or directories to copy to the head and worker nodes
file_mounts:
  {
    #    "/app/ray_on_golem": "/tmp/ray-on-golem",
  }

# Tells the autoscaler the allowed node types and the resources they provide
available_node_types:
  ray.head.default:
    # The minimum number of worker nodes of this type to launch
    min_workers: 0

    # The maximum number of worker nodes of this type to launch
    max_workers: 0

    # The node type's CPU and GPU resources
    resources: {}

    node_config: {} # TODO: Demand description here
  ray.worker.default:
    min_workers: 1
    max_workers: 10
    resources: {}
    node_config: {}

# List of commands that will be run to initialize the nodes (before `setup_commands`)
#initialization_commands: [
#  "pip install endplay",
#]
initialization_commands: [
    "pip install pillow",
]

# List of shell commands to run to set up nodes
setup_commands: []

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands: [
  "ray start --head --node-ip-address 192.168.0.3 --include-dashboard=True --dashboard-host 0.0.0.0 --disable-usage-stats --autoscaling-config=~/ray_bootstrap_config.yaml",
]

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands: [
  "ray start --address 192.168.0.3:6379",
]

# Authentication credentials that Ray will use to launch nodes
# auth:
  # Custom username for ssh
  # ssh_user: "root"

  # If ssh_private_key will be not provided, temporary key will be created and used
  # ssh_private_key: '~/.ssh/id_rsa'

# A list of paths to the files or directories to copy from the head node to the worker nodes
cluster_synced_files: []
