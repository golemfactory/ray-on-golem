name: Build the GVMI image

on:
  workflow_call:
    inputs:
      IS_TEST_BUILD:
        description: Whether this run is a test build
        required: True
        type: boolean
      ENV_PYTHON_VERSION:
        description: Python version used in the build environment
        required: True
        type: string
      IMAGE_PYTHON_VERSION:
        description: Python version used in the GVMI image
        required: True
        type: string
      REGISTRY_REPOSITORY:
        description: The repository in the Golem Registry to upload the image to
        required: True
        type: string
    secrets:
      REGISTRY_USER:
        required: True
      REGISTRY_TOKEN:
        required: True

jobs:
  image_test:
    name: Build the image
    runs-on: [goth2]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.ENV_PYTHON_VERSION }}
      - uses: Gr1N/setup-poetry@v8
      - name: Install requirements
        run: poetry install --no-ansi
      - name: Get Ray-On-Golem version
        run: echo "::set-output name=version::$(poetry version | sed 's/ray-on-golem //')"
        id: ray_on_golem_version
      - name: Get Ray version
        run: echo "::set-output name=version::$(poetry run pip freeze | grep 'ray==' | sed 's/ray==//')"
        id: ray_version
      - name: Set image version
        run: echo "::set-output name=version::${{ steps.ray_on_golem_version.outputs.version }}-py${{ inputs.IMAGE_PYTHON_VERSION }}-ray${{ steps.ray_version.outputs.version }}"
        id: image_version
      - name: Build DEV cluster config file
        run: poetry run poe dev_yaml
        if: ${{ inputs.IS_TEST_BUILD }}
      - name: Get DEV YAML image tag
        run: echo "YAML_IMAGE_TAG=$(poetry run yaml-get -p provider.parameters.node_config.demand.image_tag golem-cluster.dev.yaml)"
        if: ${{ inputs.IS_TEST_BUILD }}
      - name: Get Production YAML image tag
        run: echo "YAML_IMAGE_TAG=$(poetry run yaml-get -p provider.parameters.node_config.demand.image_tag golem-cluster.yaml)"
        if: ${{ ! inputs.IS_TEST_BUILD }}
      - name: Set YAML image tag
        run: echo "::set-output name=tag::${{ env.YAML_IMAGE_TAG }}"
        id: yaml_image_tag
      - name: Set pushed image tag
        run: echo "::set-output name=tag::${{ inputs.REGISTRY_REPOSITORY }}:${{ steps.image_version.outputs.version }}"
        id: pushed_image_tag
      - name: Test
        run: echo ${{ steps.pushed_image_tag.outputs.tag }} VS ${{ steps.yaml_image_tag.outputs.tag }}
      - name: Fail on YAML tag mismatch
        run: exit 1
        if:
          ${{ steps.yaml_image_tag.outputs.tag != steps.pushed_image_tag.outputs.tag }}

      - name: Build the image
        run: docker build -t ray-on-golem:${{ steps.image_version.outputs.version }} --build-arg="PYTHON_VERSION=${{ inputs.IMAGE_PYTHON_VERSION }}" .
      - name: Convert the image
        run: gvmkit-build ray-on-golem:${{ steps.image_version.outputs.version }}
      - name: Push the image
        run: REGISTRY_USER=${{ secrets.REGISTRY_USER }} REGISTRY_TOKEN=${{ secrets.REGISTRY_TOKEN }} poetry run gvmkit-build ray-on-golem:${{ steps.image_version.outputs.version }} --push-to ${{ steps.pushed_image_tag.outputs.tag }}
