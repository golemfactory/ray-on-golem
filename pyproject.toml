[tool.poetry]
name = "ray-on-golem"
version = "0.11.1"
description = "Golem Network integration with Ray"
authors = ["Golem Factory <contact@golem.network>"]
readme = "README.md"
packages = [{include = "ray_on_golem"}]

[tool.poetry.dependencies]
python = "^3.8.1"

ray = {version = "~2.9.3", extras = ["default"]}
#golem-core = {path = "../golem-core-python", develop = true}
# golem-core = {git = "https://github.com/golemfactory/golem-core-python.git", branch = "main"}
# golem-core = {version = "^0.7.0", source = "test-pypi"}
golem-core = "^0.7.3"
aiohttp = "^3"
requests = "^2"
click = "^8"
pydantic = "<2"
toml = "^0.10.2"
dpath = "^2.1.6"
appdirs = "^1.4.4"
tortoise-orm = "^0.20.0"
aerich = "^0.7.2"
prettytable = "^3.10.0"
psutil = "^5.9.8"
yarl = "^1.9.4"

websocat = "^1.13.0"
golem-node = "^0.15.0"

setuptools = "*"

[tool.poetry.group.ray.dependencies]
python = "^3.8.1"

ray = {version="==2.9.3", extras=["default"]}
requests = "^2"
click = "^8"
pydantic = "<2"
toml = "^0.10.2"
dpath = "^2.1.6"
appdirs = "^1.4.4"

[tool.poetry.scripts]
ray-on-golem = "ray_on_golem.main:main"
rog-db = "ray_on_golem.reputation.admin:admin"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.22.0"
liccheck = "^0.9.1"

black = "^23.7.0"
isort = "^5.12.0"
autoflake = "^2.2.0"
gvmkit-build = "^0.3.13"
dpath = "^2.1.6"
yamlpath = "^3.8.1"
pytest = "^7.4.3"
pytest-asyncio = "^0.23.5.post1"
factory-boy = "^3.3.0"

[[tool.poetry.source]]
name = "test-pypi"
url = "https://test.pypi.org/simple/"
priority = "explicit"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
format = {sequence = ["_format_autoflake", "_format_isort", "_format_black"], help = "Run code auto formatting"}
_format_autoflake = "autoflake ."
_format_isort = "isort ."
_format_black = "black ."

tests_unit = {cmd = "pytest -sv tests/unit", help = "Run unit tests"}

checks = {sequence = ["check_codestyle"], help = "Run all available code checks"}  # temporarily disabled `liccheck` because `websocat` has a broken license
check_codestyle = {sequence = ["_check_codestyle_autoflake", "_check_codestyle_isort", "_check_codestyle_black"], help = "Run only code style checks"}
_check_codestyle_autoflake = "autoflake --check-diff --quiet ."
_check_codestyle_isort = "isort --check-only --diff ."
_check_codestyle_black = "black --check --diff ."
check_license = {sequence = ["_check_license_export", "_check_license_verify"], help = "Check license compatibility"}
_check_license_export = "poetry export -f requirements.txt -o .requirements.txt"
_check_license_verify = "liccheck -r .requirements.txt"
dev_yaml = {cmd = "python -m utils.apply_overrides -o golem-cluster.dev.yaml golem-cluster.override.*", help="Generate development YAML file."}

[tool.isort]
profile = "black"
py_version = 38
line_length = 100
skip_gitignore = true

[tool.autoflake]
recursive = true
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true

[tool.black]
line-length = 100
target-version = ['py38']

[tool.liccheck]
authorized_licenses = [
  "bsd",
  "new bsd",
  "bsd license",
  "3-Clause BSD",
  "apache 2",
  "apache",
  "Apache Software",
  "Apache Software License",
  "Apache 2.0",
  "MPL-2.0",
  "Mozilla Public License 2.0 (MPL 2.0)",
  "MIT",
  "MIT License",
  "LGPL",
  "LGPL-3.0-or-later",
  "GNU Lesser General Public License v3 or later (LGPLv3+)",
  "GNU Lesser General Public License v3 (LGPLv3)",
  "GNU General Public License v3 (GPLv3)",
  "GNU Library or Lesser General Public License (LGPL)",
  "Python Software Foundation",
  "ISC",
  "ISC License (ISCL)",
  "The Unlicense (Unlicense)",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
